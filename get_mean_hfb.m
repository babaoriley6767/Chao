function [hfb_mean_data] = get_mean_hfb(sbj_name,project_name,block_names,dirs,elecs,tag,column,conds,datatype,freq_band,stats_params,plot_params)

%% INPUTS
%       sbj_name: subject name
%       project_name: name of task
%       block_names: blocks to be analyed (cell of strings)
%       dirs: directories pointing to files of interest (generated by InitializeDirs)
%       elecs: can select subset of electrodes to epoch (default: all)
%       column:         column name of data.trialinfo where conds are
%       conds:          cell containing cond name(s) (1 or 2) to compare
%       freq_band: e.g., 'CAR','HFB','SpecDense'
%       datatype: 'Band' or 'Spec'
%       stats_params:   .task_win:   2-element vector specifying window of time to use in stats (in sec)    
%                       .bl_win:     2-element vector specifying window to use for baseline (in sec)- only relevent when 1 condition
%                       .paired:     true or false: 
%                                    when comparing two conditions, can only do unpaired test (i.e. false)
%                                    when comparing one condition to baseline, can do paired or unpaired test 
%                                    (for paired, will only use baseline periods just prior to trials of interest; 
%                                    for unpaired, will use baseline periods from all trials)    
%                       .nreps:      # of reps for permutation: default = 10000
%                       .noise_method:   'trials' or 'timepts': how to eliminate trials
%                       .freq_range:    2-element vector specifying freq range to use for stats 
%                                       (for spectral data only)
%                       .alpha (significance threshold for p-value, before FDR correction; default = 0.05)
%% OUTPUTS
%       p: p-value for each electrode site
%       p_fdr: p threshold for significance after FDR correction
%       sig: binary vector indicating which electrode sites have
%            significant p-value after FDR correction (i.e. where p < p_fdr)

if isempty(stats_params)
    stats_params = genStatsParams(project_name);
end

%% 
load([dirs.data_root,'/OriginalData/',sbj_name,'/global_',project_name,'_',sbj_name,'_',block_names{1},'.mat'])
if isempty(elecs)
    elecs = setdiff(1:globalVar.nchan,globalVar.refChan);
end

tag = ['stim','lock'];
if plot_params.blc
    tag = [tag,'_bl_corr'];
end
%% loop through electrodes

data_all = concatBlocks(sbj_name,block_names,dirs,elecs(1),freq_band,datatype,{'wave'},tag);
if isempty(conds)
    tmp = find(~cellfun(@isempty,(data_all.trialinfo.(column))));
    conds = unique(data_all.trialinfo.(column)(tmp));
end

if strcmp(project_name, 'race_encoding_simple')
    nstim = 1;
else
    nstim = nanmax(data_all.trialinfo.nstim);
end


output_tmp.data = cell(globalVar.nchan,length(conds));
output_tmp.meandata = nan(globalVar.nchan,length(conds));
output_tmp.label = globalVar.channame;
output_tmp.sbj_name = sbj_name;
output_tmp.project_name = project_name;


if plot_params.multielec
    groupall = true;
else
    groupall = false;
end


for ei = 1:length(elecs)
    el = elecs(ei);
    data_all = concatBlocks(sbj_name, block_names,dirs,el,freq_band,datatype,{'wave'},tag);
    [grouped_trials_all,~] = groupConds(conds,data_all.trialinfo,column,'none',[],groupall);
    [grouped_trials,cond_names] = groupConds(conds,data_all.trialinfo,column,plot_params.noise_method,plot_params.noise_fields_trials,groupall);
    for si = 1:length(conds)
        output_tmp.data{ei,si} = data_all.wave(grouped_trials{si},:);
        output_tmp.data{ei,si} = output_tmp.data{ei,si}(:,(find(abs(data_all.time-0.1)<0.001):find(abs(data_all.time-1)<0.001)));% time scale
        output_tmp.meandata(ei,si) = nanmean(output_tmp.data{ei,si},'all');
    end
    disp(['Performing mean hfb z score on elec: ',num2str(el)])
end

hfb_mean_data = output_tmp;

dir_out = [dirs.result_root,'/',project_name,'/',sbj_name,'/'];
if ~exist([dir_out,'Stats'])
    mkdir(dir_out,'Stats')
else
end
    fileROL = 'Stats';
    
    fn_out = sprintf('%s/%s/%s_%s_%s.mat',dir_out,fileROL,sbj_name,project_name,'hfb_mean_data');%
    save(fn_out,'hfb_mean_data');
    fn_out = sprintf('/Users/chao/Desktop/Project_in_Stanford/RACE/4_working_data/Stats/%s_%s_%s.mat',sbj_name,project_name,'hfb_mean_data');
    save(fn_out,'hfb_mean_data');
  

end


